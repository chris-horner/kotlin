// INTENTION_CLASS: org.jetbrains.kotlin.android.intention.ImplementParcelableAction

import android.os.Parcel
import android.os.Parcelable

open class BaseParcelable(parcel: Parcel) : Parcelable {
    override fun writeToParcel(parcel: Parcel, flags: Int) {

    }

    override fun describeContents(): Int {
        return 0
    }

    companion object CREATOR : Parcelable.Creator<BaseParcelable> {
        override fun createFromParcel(parcel: Parcel): BaseParcelable {
            return BaseParcelable(parcel)
        }

        override fun newArray(size: Int): Array<BaseParcelable?> {
            return arrayOfNulls(size)
        }
    }
}

class MyData(parcel: Parcel) : Parcelable {

    val delegated by lazy { 0 }
    val readonlyField = true

    var field1: Int = 0
    var field2: String = ""
    var field3: Long = 0
    var field4: Byte = 0
    var field5: Char = '\u0000'
    var field6: Short = 0
    var field7: Float = 0.0f
    var field8: Double = 0.0
    var field9: Boolean = false

    var goodArray: Array<BaseParcelable> = emptyArray()
    var badArray: Array<Parcelable> = emptyArray()

    var goodList: List<BaseParcelable> = emptyList()
    var badList: List<Parcelable> = emptyList()

    var parcelableProperty: SuperParcelable
    val uninitializedVal: Int

    val fieldWIthGetter: Int
        get() {
            return 0
        }

    var fieldWithCustomGetterAndSetter: Int = 0
        get() {
            return field
        }
        set(value: Int) {
            field = value
        }

    init {
        field1 = parcel.readInt()
        field2 = parcel.readString()
        field3 = parcel.readLong()
        field4 = parcel.readByte()
        field5 = parcel.readInt().toChar()
        field6 = parcel.readInt().toShort()
        field7 = parcel.readFloat()
        field8 = parcel.readDouble()
        field9 = parcel.readByte() != 0.toByte()
        goodArray = parcel.createTypedArray(BaseParcelable)
        goodList = parcel.createTypedArrayList(BaseParcelable)
        uninitializedVal = parcel.readInt()
        fieldWithCustomGetterAndSetter = parcel.readInt()
    }

    override fun writeToParcel(parcel: Parcel, flags: Int) {
        parcel.writeInt(field1)
        parcel.writeString(field2)
        parcel.writeLong(field3)
        parcel.writeByte(field4)
        parcel.writeInt(field5.toInt())
        parcel.writeInt(field6.toInt())
        parcel.writeFloat(field7)
        parcel.writeDouble(field8)
        parcel.writeByte(if (field9) 1 else 0)
        parcel.writeTypedArray(goodArray, flags)
        parcel.writeTypedList(goodList)
        parcel.writeInt(uninitializedVal)
        parcel.writeInt(fieldWithCustomGetterAndSetter)
    }

    override fun describeContents(): Int {
        return 0
    }

    companion object CREATOR : Parcelable.Creator<MyData> {
        override fun createFromParcel(parcel: Parcel): MyData {
            return MyData(parcel)
        }

        override fun newArray(size: Int): Array<MyData?> {
            return arrayOfNulls(size)
        }
    }
}