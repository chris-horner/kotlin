/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.jvm.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/loadJava/compiledJava")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class LoadJavaWithFastClassReadingTestGenerated extends AbstractLoadJavaWithFastClassReadingTest {
    public void testAllFilesPresentInCompiledJava() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true, "sam", "kotlinSignature/propagation");
    }

    @TestMetadata("ArrayTypeVariance.java")
    public void testArrayTypeVariance() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ArrayTypeVariance.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("ClassDoesNotOverrideMethod.java")
    public void testClassDoesNotOverrideMethod() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ClassDoesNotOverrideMethod.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("ClassWithConstVal.java")
    public void testClassWithConstVal() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ClassWithConstVal.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("ClassWithTypeP.java")
    public void testClassWithTypeP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ClassWithTypeP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("ClassWithTypePExtendsIterableP.java")
    public void testClassWithTypePExtendsIterableP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ClassWithTypePExtendsIterableP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("ClassWithTypePP.java")
    public void testClassWithTypePP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ClassWithTypePP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("ClassWithTypePRefNext.java")
    public void testClassWithTypePRefNext() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ClassWithTypePRefNext.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("ClassWithTypePRefSelf.java")
    public void testClassWithTypePRefSelf() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ClassWithTypePRefSelf.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("ClassWithTypePRefSelfAndClass.java")
    public void testClassWithTypePRefSelfAndClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/ClassWithTypePRefSelfAndClass.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("FieldAsVar.java")
    public void testFieldAsVar() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/FieldAsVar.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("FieldOfArrayType.java")
    public void testFieldOfArrayType() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/FieldOfArrayType.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("FinalFieldAsVal.java")
    public void testFinalFieldAsVal() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/FinalFieldAsVal.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("InheritMethodsDifferentReturnTypes.java")
    public void testInheritMethodsDifferentReturnTypes() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/InheritMethodsDifferentReturnTypes.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("InheritMethodsDifferentReturnTypesGeneric.java")
    public void testInheritMethodsDifferentReturnTypesGeneric() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/InheritMethodsDifferentReturnTypesGeneric.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("InnerClass.java")
    public void testInnerClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/InnerClass.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("InnerClassReferencesOuterTP.java")
    public void testInnerClassReferencesOuterTP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/InnerClassReferencesOuterTP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("InnerClassTypeMultipleGeneric.java")
    public void testInnerClassTypeMultipleGeneric() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/InnerClassTypeMultipleGeneric.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("InnerClassesInGeneric.java")
    public void testInnerClassesInGeneric() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/InnerClassesInGeneric.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("InnerOfGeneric.java")
    public void testInnerOfGeneric() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/InnerOfGeneric.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("IntrinsicCompanionObject.java")
    public void testIntrinsicCompanionObject() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/IntrinsicCompanionObject.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("MethodReferencesOuterClassTP.java")
    public void testMethodReferencesOuterClassTP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/MethodReferencesOuterClassTP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("MethodTypePOneUpperBound.java")
    public void testMethodTypePOneUpperBound() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/MethodTypePOneUpperBound.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("MethodTypePTwoUpperBounds.java")
    public void testMethodTypePTwoUpperBounds() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/MethodTypePTwoUpperBounds.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("MethodWithTypeP.java")
    public void testMethodWithTypeP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/MethodWithTypeP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("MethodWithTypePP.java")
    public void testMethodWithTypePP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/MethodWithTypePP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("MethodWithTypePRefClassP.java")
    public void testMethodWithTypePRefClassP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/MethodWithTypePRefClassP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("MethosWithPRefTP.java")
    public void testMethosWithPRefTP() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/MethosWithPRefTP.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("MyException.java")
    public void testMyException() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/MyException.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("NestedClass.java")
    public void testNestedClass() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/NestedClass.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("OverrideMethod.java")
    public void testOverrideMethod() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/OverrideMethod.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("PackageLocalVisibility.java")
    public void testPackageLocalVisibility() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/PackageLocalVisibility.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("PrivateMembers.java")
    public void testPrivateMembers() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/PrivateMembers.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("PrivateMembersInHierarchy.java")
    public void testPrivateMembersInHierarchy() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/PrivateMembersInHierarchy.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("RawOverrides.java")
    public void testRawOverrides() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/RawOverrides.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("RawTypeWithUpperBound.java")
    public void testRawTypeWithUpperBound() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/RawTypeWithUpperBound.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("RawUpperBound.java")
    public void testRawUpperBound() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/RawUpperBound.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("RecursiveRawUpperBound.java")
    public void testRecursiveRawUpperBound() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/RecursiveRawUpperBound.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("RecursiveWildcardUpperBound.java")
    public void testRecursiveWildcardUpperBound() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/RecursiveWildcardUpperBound.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("RemoveRedundantProjectionKind.java")
    public void testRemoveRedundantProjectionKind() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/RemoveRedundantProjectionKind.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("Simple.java")
    public void testSimple() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/Simple.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("SubclassFromNested.java")
    public void testSubclassFromNested() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/SubclassFromNested.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("TopLevel$Class.java")
    public void testTopLevel$Class() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/TopLevel$Class.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("TwoFields.java")
    public void testTwoFields() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/TwoFields.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("UnboundWildcard.java")
    public void testUnboundWildcard() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/UnboundWildcard.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("WildcardBounds.java")
    public void testWildcardBounds() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/WildcardBounds.java");
        doTestCompiledJava(fileName);
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/annotations")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Annotations extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInAnnotations() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/annotations"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("AnnotatedAnnotation.java")
        public void testAnnotatedAnnotation() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotatedAnnotation.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("AnnotatedConstructor.java")
        public void testAnnotatedConstructor() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotatedConstructor.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("AnnotatedEnumEntry.java")
        public void testAnnotatedEnumEntry() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotatedEnumEntry.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("AnnotatedField.java")
        public void testAnnotatedField() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotatedField.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("AnnotatedMethod.java")
        public void testAnnotatedMethod() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotatedMethod.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("AnnotatedValueParameter.java")
        public void testAnnotatedValueParameter() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotatedValueParameter.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("AnnotationInParam.java")
        public void testAnnotationInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotationInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("AnnotationRetentions.java")
        public void testAnnotationRetentions() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotationRetentions.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("AnnotationTargets.java")
        public void testAnnotationTargets() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/AnnotationTargets.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ArithmeticExpressionInParam.java")
        public void testArithmeticExpressionInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/ArithmeticExpressionInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ArrayOfEnumInParam.java")
        public void testArrayOfEnumInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/ArrayOfEnumInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ArrayOfStringInParam.java")
        public void testArrayOfStringInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/ArrayOfStringInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ClassObjectArrayInParam.java")
        public void testClassObjectArrayInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/ClassObjectArrayInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ClassObjectInParam.java")
        public void testClassObjectInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/ClassObjectInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ClassObjectInParamRaw.java")
        public void testClassObjectInParamRaw() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/ClassObjectInParamRaw.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ClassObjectInParamVariance.java")
        public void testClassObjectInParamVariance() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/ClassObjectInParamVariance.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("CustomAnnotation.java")
        public void testCustomAnnotation() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/CustomAnnotation.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("CustomAnnotationWithDefaultParameter.java")
        public void testCustomAnnotationWithDefaultParameter() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/CustomAnnotationWithDefaultParameter.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("EmptyArrayInParam.java")
        public void testEmptyArrayInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/EmptyArrayInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("EnumArgumentWithCustomToString.java")
        public void testEnumArgumentWithCustomToString() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/EnumArgumentWithCustomToString.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("EnumConstructorParameter.java")
        public void testEnumConstructorParameter() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/EnumConstructorParameter.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("EnumInParam.java")
        public void testEnumInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/EnumInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("JavaDocDeprecated.java")
        public void testJavaDocDeprecated() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/JavaDocDeprecated.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("NestedEnumArgument.java")
        public void testNestedEnumArgument() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/NestedEnumArgument.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("PrimitiveValueInParam.java")
        public void testPrimitiveValueInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/PrimitiveValueInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("RecursiveAnnotation.java")
        public void testRecursiveAnnotation() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/RecursiveAnnotation.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("RecursiveAnnotation2.java")
        public void testRecursiveAnnotation2() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/RecursiveAnnotation2.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("SimpleAnnotation.java")
        public void testSimpleAnnotation() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/SimpleAnnotation.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StringConcatenationInParam.java")
        public void testStringConcatenationInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/StringConcatenationInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StringConstantInParam.java")
        public void testStringConstantInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/StringConstantInParam.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StringInParam.java")
        public void testStringInParam() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/annotations/StringInParam.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/constructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constructor extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInConstructor() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/constructor"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ConstructorGenericDeep.java")
        public void testConstructorGenericDeep() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/constructor/ConstructorGenericDeep.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ConstructorGenericSimple.java")
        public void testConstructorGenericSimple() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/constructor/ConstructorGenericSimple.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ConstructorGenericUpperBound.java")
        public void testConstructorGenericUpperBound() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/constructor/ConstructorGenericUpperBound.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/enum")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Enum extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInEnum() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/enum"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("EnumMembers.java")
        public void testEnumMembers() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/enum/EnumMembers.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("EnumWithSpecializedEntry.java")
        public void testEnumWithSpecializedEntry() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/enum/EnumWithSpecializedEntry.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("JavaEnum.java")
        public void testJavaEnum() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/enum/JavaEnum.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/javaBean")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JavaBean extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInJavaBean() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/javaBean"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("DifferentGetterAndSetter.java")
        public void testDifferentGetterAndSetter() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/javaBean/DifferentGetterAndSetter.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("JavaBeanAbstractGetter.java")
        public void testJavaBeanAbstractGetter() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/javaBean/JavaBeanAbstractGetter.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("JavaBeanVal.java")
        public void testJavaBeanVal() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/javaBean/JavaBeanVal.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("JavaBeanVar.java")
        public void testJavaBeanVar() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/javaBean/JavaBeanVar.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("JavaBeanVarOfGenericType.java")
        public void testJavaBeanVarOfGenericType() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/javaBean/JavaBeanVarOfGenericType.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("TwoSetters.java")
        public void testTwoSetters() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/javaBean/TwoSetters.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class KotlinSignature extends AbstractLoadJavaWithFastClassReadingTest {
        @TestMetadata("AllBoundsInWhen.java")
        public void testAllBoundsInWhen() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/AllBoundsInWhen.java");
            doTestCompiledJava(fileName);
        }

        public void testAllFilesPresentInKotlinSignature() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/kotlinSignature"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true, "propagation");
        }

        @TestMetadata("ArrayType.java")
        public void testArrayType() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/ArrayType.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ConstructorWithNewTypeParams.java")
        public void testConstructorWithNewTypeParams() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/ConstructorWithNewTypeParams.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ConstructorWithParentTypeParams.java")
        public void testConstructorWithParentTypeParams() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/ConstructorWithParentTypeParams.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ConstructorWithSeveralParams.java")
        public void testConstructorWithSeveralParams() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/ConstructorWithSeveralParams.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ConstructorWithoutParams.java")
        public void testConstructorWithoutParams() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/ConstructorWithoutParams.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("CustomProjectionKind.java")
        public void testCustomProjectionKind() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/CustomProjectionKind.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("MethodWithFunctionTypes.java")
        public void testMethodWithFunctionTypes() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithFunctionTypes.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("MethodWithGenerics.java")
        public void testMethodWithGenerics() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithGenerics.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("MethodWithMappedClasses.java")
        public void testMethodWithMappedClasses() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithMappedClasses.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("MethodWithTypeParameters.java")
        public void testMethodWithTypeParameters() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithTypeParameters.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("MethodWithVararg.java")
        public void testMethodWithVararg() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/MethodWithVararg.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("PropertyArrayTypes.java")
        public void testPropertyArrayTypes() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/PropertyArrayTypes.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("PropertyComplexTypes.java")
        public void testPropertyComplexTypes() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/PropertyComplexTypes.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("PropertySimpleType.java")
        public void testPropertySimpleType() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/PropertySimpleType.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StarProjection.java")
        public void testStarProjection() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/StarProjection.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/error")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Error extends AbstractLoadJavaWithFastClassReadingTest {
            public void testAllFilesPresentInError() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/kotlinSignature/error"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
            }

            @TestMetadata("WrongProjectionKind.java")
            public void testWrongProjectionKind() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/error/WrongProjectionKind.java");
                doTestCompiledJava(fileName);
            }

            @TestMetadata("WrongReturnTypeStructure.java")
            public void testWrongReturnTypeStructure() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/error/WrongReturnTypeStructure.java");
                doTestCompiledJava(fileName);
            }

            @TestMetadata("WrongTypeParameterBoundStructure1.java")
            public void testWrongTypeParameterBoundStructure1() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/error/WrongTypeParameterBoundStructure1.java");
                doTestCompiledJava(fileName);
            }

            @TestMetadata("WrongValueParameterStructure1.java")
            public void testWrongValueParameterStructure1() throws Exception {
                String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/kotlinSignature/error/WrongValueParameterStructure1.java");
                doTestCompiledJava(fileName);
            }
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/library")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Library extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInLibrary() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/library"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("LoadIterable.java")
        public void testLoadIterable() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/library/LoadIterable.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("LoadIterator.java")
        public void testLoadIterator() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/library/LoadIterator.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("Max.java")
        public void testMax() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/library/Max.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/modality")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Modality extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInModality() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/modality"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ModalityOfFakeOverrides.java")
        public void testModalityOfFakeOverrides() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/modality/ModalityOfFakeOverrides.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/mutability")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Mutability extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInMutability() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/mutability"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("LoadIterable.java")
        public void testLoadIterable() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/mutability/LoadIterable.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("LoadIterableWithConflict.java")
        public void testLoadIterableWithConflict() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/mutability/LoadIterableWithConflict.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("LoadIterableWithNullability.java")
        public void testLoadIterableWithNullability() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/mutability/LoadIterableWithNullability.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("LoadIterableWithPropagation.java")
        public void testLoadIterableWithPropagation() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/mutability/LoadIterableWithPropagation.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ReadOnlyExtendsWildcard.java")
        public void testReadOnlyExtendsWildcard() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/mutability/ReadOnlyExtendsWildcard.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/notNull")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class NotNull extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInNotNull() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/notNull"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("NotNullField.java")
        public void testNotNullField() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/notNull/NotNullField.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("NotNullIntArray.java")
        public void testNotNullIntArray() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/notNull/NotNullIntArray.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("NotNullMethod.java")
        public void testNotNullMethod() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/notNull/NotNullMethod.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("NotNullObjectArray.java")
        public void testNotNullObjectArray() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/notNull/NotNullObjectArray.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("NotNullParameter.java")
        public void testNotNullParameter() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/notNull/NotNullParameter.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/protectedPackage")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedPackage extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInProtectedPackage() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/protectedPackage"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ProtectedPackageConstructor.java")
        public void testProtectedPackageConstructor() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageConstructor.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ProtectedPackageFun.java")
        public void testProtectedPackageFun() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageFun.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ProtectedPackageProperty.java")
        public void testProtectedPackageProperty() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/protectedPackage/ProtectedPackageProperty.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/protectedStatic")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ProtectedStatic extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInProtectedStatic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/protectedStatic"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ConstructorInProtectedStaticNestedClass.java")
        public void testConstructorInProtectedStaticNestedClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/protectedStatic/ConstructorInProtectedStaticNestedClass.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/rendering")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Rendering extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInRendering() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/rendering"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("Rendering.java")
        public void testRendering() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/rendering/Rendering.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SignaturePropagation extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInSignaturePropagation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/signaturePropagation"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("ArraysInSubtypes.java")
        public void testArraysInSubtypes() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/ArraysInSubtypes.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("MethodTypeParameterErased.java")
        public void testMethodTypeParameterErased() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/MethodTypeParameterErased.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("RawSuperType.java")
        public void testRawSuperType() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperType.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("RawSuperTypeWithBound.java")
        public void testRawSuperTypeWithBound() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperTypeWithBound.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("RawSuperTypeWithRecursiveBound.java")
        public void testRawSuperTypeWithRecursiveBound() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperTypeWithRecursiveBound.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("RawSuperTypeWithRecursiveBoundMultipleParameters.java")
        public void testRawSuperTypeWithRecursiveBoundMultipleParameters() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/RawSuperTypeWithRecursiveBoundMultipleParameters.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("ReturnInnerSubclassOfSupersInner.java")
        public void testReturnInnerSubclassOfSupersInner() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/ReturnInnerSubclassOfSupersInner.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("SubclassWithRawType.java")
        public void testSubclassWithRawType() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/SubclassWithRawType.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("TwoSuperclassesInconsistentGenericTypes.java")
        public void testTwoSuperclassesInconsistentGenericTypes() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/signaturePropagation/TwoSuperclassesInconsistentGenericTypes.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/static")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Static extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInStatic() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/static"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("DeeplyInnerClass.java")
        public void testDeeplyInnerClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/DeeplyInnerClass.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("DeeplyNestedStatic.java")
        public void testDeeplyNestedStatic() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/DeeplyNestedStatic.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("Enum.java")
        public void testEnum() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/Enum.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("InnerClass.java")
        public void testInnerClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/InnerClass.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("Simple.java")
        public void testSimple() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/Simple.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StaticFinal.java")
        public void testStaticFinal() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/StaticFinal.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StaticMembersFromParentClass.java")
        public void testStaticMembersFromParentClass() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/StaticMembersFromParentClass.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StaticMembersFromParentClassVisibility.java")
        public void testStaticMembersFromParentClassVisibility() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/StaticMembersFromParentClassVisibility.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StaticMembersFromParentInterface.java")
        public void testStaticMembersFromParentInterface() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/StaticMembersFromParentInterface.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StaticMembersInEnum.java")
        public void testStaticMembersInEnum() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/StaticMembersInEnum.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("StaticMembersInEnumFromParents.java")
        public void testStaticMembersInEnumFromParents() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/static/StaticMembersInEnumFromParents.java");
            doTestCompiledJava(fileName);
        }
    }

    @TestMetadata("compiler/testData/loadJava/compiledJava/vararg")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Vararg extends AbstractLoadJavaWithFastClassReadingTest {
        public void testAllFilesPresentInVararg() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/loadJava/compiledJava/vararg"), Pattern.compile("^(.+)\\.java$"), TargetBackend.ANY, true);
        }

        @TestMetadata("VarargInt.java")
        public void testVarargInt() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/vararg/VarargInt.java");
            doTestCompiledJava(fileName);
        }

        @TestMetadata("VarargString.java")
        public void testVarargString() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("compiler/testData/loadJava/compiledJava/vararg/VarargString.java");
            doTestCompiledJava(fileName);
        }
    }
}
